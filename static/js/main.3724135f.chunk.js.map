{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["web3","onboard","Onboard","dappId","networkId","subscriptions","wallet","Web3","provider","console","log","name","darkMode","App","useState","signedMessage","setSignedMessage","login","a","walletSelect","walletCheck","signMessage","eth","getAccounts","from","expiration","Math","round","Date","now","toString","message","personal","sign","signature","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kiBAKIA,E,yHAEEC,EAAUC,YAAQ,CACtBC,OAAQ,uCACRC,UAAW,EACXC,cAAe,CACbC,OAAQ,SAACA,GACPN,EAAO,IAAIO,IAAKD,EAAOE,UACvBC,QAAQC,IAAR,UAAeJ,EAAOK,KAAtB,wBAGJC,UAAU,IAoCGC,MAjCf,WAAgB,IAAD,EAC6BC,mBAAS,MADtC,mBACNC,EADM,KACSC,EADT,KAGPC,EAAK,uCAAG,sBAAAC,EAAA,+EAEJjB,EAAQkB,eAFJ,uBAGJlB,EAAQmB,cAHJ,mBAIVJ,EAJU,SAIaK,IAJb,oFAMVZ,QAAQC,IAAR,MANU,0DAAH,qDAULW,EAAW,uCAAG,kCAAAH,EAAA,sEACElB,EAAKsB,IAAIC,cADX,cACZC,EADY,OAC0B,GACtCC,EAAaC,KAAKC,MAAMC,KAAKC,MAAQ,IAAO,KAAKC,WACjDC,EAHY,UAGCP,EAHD,YAGSC,GAHT,SAIMzB,EAAKsB,IAAIU,SAASC,KAAKF,EAASP,GAJtC,cAIZU,EAJY,mCAKRA,EALQ,YAKKH,IALL,2CAAH,qDAQjB,OACE,qBAAKI,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAMA,UAAU,gBAAhB,SAAiCpB,IACjC,sBAAMoB,UAAU,aAAaC,QAASnB,EAAtC,kCChCOoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,gCAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3724135f.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport Onboard from \"bnc-onboard\";\nimport Web3 from \"web3\";\n\nlet web3;\n\nconst onboard = Onboard({\n  dappId: \"abfa7356-64c3-4047-a6e1-cdb39a0c691e\", // [String] The API key created by step one above\n  networkId: 4, // [Integer] The Ethereum network ID your Dapp uses.\n  subscriptions: {\n    wallet: (wallet) => {\n      web3 = new Web3(wallet.provider);\n      console.log(`${wallet.name} is now connected`);\n    },\n  },\n  darkMode: true,\n});\n\nfunction App() {\n  const [signedMessage, setSignedMessage] = useState(null);\n\n  const login = async () => {\n    try {\n      await onboard.walletSelect();\n      await onboard.walletCheck();\n      setSignedMessage(await signMessage());\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const signMessage = async () => {\n    const from = (await web3.eth.getAccounts())[0];\n    const expiration = Math.round(Date.now() / 1000 + 300).toString();\n    const message = `${from}-${expiration}`;\n    const signature = await web3.eth.personal.sign(message, from);\n    return `${signature}-${message}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <code className=\"App-signature\">{signedMessage}</code>\n        <span className=\"App-button\" onClick={login}>\n          Connect Wallet\n        </span>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}